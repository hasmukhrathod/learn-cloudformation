AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template: Sample
  template showing how to create a VPC with two public subnets & two private subnets.
  Class A IP addresses are used for huge networks, like those deployed by Internet Service Providers (ISPs). Class A IP addresses support up to 16 million hosts (hosts are devices that connect to a network (computers, servers, switches, routers, printersâ€¦etc.) and a Class A network can be divided into 128 different networks. 
  Class B IP addresses are used for medium and large-sized networks in enterprises and organizations. They support up to 65,000 hosts on 16,000 individual networks. 
  Class C addresses are most common and used in small business and home networks. These support up to 256 hosts on each of 2 million networks. 
  Class C Private Range: 192.168.0.0 to 192.168.255.255
  The allowed block size is between a /16 netmask (65,536 IP addresses) and /28 netmask (16 IP addresses).
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Project Name with its Environment: EC-Staging"
        Parameters: 
          - ProjectEnvPrefix
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      - 
        Label: 
          default: "Amazon EC2 Configuration"
        Parameters: 
          - ValidInstanceType
          - KeyName
          - SSHLocation
    ParameterLabels: 
      VpcCIDR: 
        default: "Enter VPC CIDR Range."
      PublicSubnet1CIDR:
        default: "What should be the range of Publice Subnet-1"
      PublicSubnet2CIDR:
        default: "What should be the range of Publice Subnet-2"
      PrivateSubnet1CIDR:
        default: "What should be the range of Private Subnet-1"    
      PrivateSubnet2CIDR:
        default: "What should be the range of Private Subnet-2"
      ValidInstanceType:
        default: "Choose Instance Type"
      KeyName:
        default: "Choose KeyPair. It will be useful while doing SSH."   
      SSHLocation:
        default: "Restrict SSH Location by specifying office IP or Home IP."          
Parameters:
  ##For Tagging
  ProjectEnvPrefix:
    Type: String
  ##VPC Creation Input Parameters
  VpcCIDR:
    Type: String
    Default: "192.168.0.0/22"
  PublicSubnet1CIDR:
    Type: String
    Default: "192.168.0.0/24"
  PublicSubnet2CIDR:
    Type: String
    Default: "192.168.1.0/24"
  PrivateSubnet1CIDR:
    Type: String
    Default: "192.168.2.0/24"
  PrivateSubnet2CIDR:
    Type: String
    Default: "192.168.3.0/24"
  ##WebServer Creation Input Parameters
  ValidInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.  
##Determine AMI ID based on the region.
Mappings:
  RegionAmiMapping:
    #N. Verginia
    us-east-1:
      AMI: ami-08f3d892de259504d
    #Ohio  
    us-east-2:
      AMI: ami-016b213e65284e9c9
    #N. California  
    us-west-1:
      AMI: ami-01311df3780ebd33e
    #Oregon  
    us-west-2:
      AMI: ami-0b1e2eeb33ce3d66f
    #Mumbai  
    ap-south-1:
      AMI: ami-0732b62d310b80e97
    #Tokyo  
    ap-northeast-1:
      AMI: ami-06ad9296e6cf1e3cf
    #Seol  
    ap-northeast-2:
      AMI: ami-0e92198843e11ccee
    #Singapore  
    ap-southeast-1:
      AMI: ami-0adbe59da7d24a349
    #sydney  
    ap-southeast-2:
      AMI: ami-0a58e22c727337c51  
Resources:
  VPC: 
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-vpc"
  PublicSubnet1: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC 
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-PublicSubnet1"
  PublicSubnet2: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC 
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-PublicSubnet2"
  PrivateSubnet1: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC 
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-PrivateSubnet1"
  PrivateSubnet2: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC 
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-PrivateSubnet2"
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-igw"
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-PublicRouteTable"
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable    
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-PrivateRouteTable"
  PrivateSubnet1ARouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2ARouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  WebServer:
    Type: "AWS::EC2::Instance"
    DependsOn: AttachGateway
    Properties:
      InstanceType: !Ref ValidInstanceType
      ImageId:
        Fn::FindInMap:
        - RegionAmiMapping
        - !Ref AWS::Region
        - AMI
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'  
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      ##we can verify: ps aux | grep "yum update"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
      Tags: 
        - Key: Name
          Value: !Sub "${ProjectEnvPrefix}-web-server"
      KeyName: !Ref KeyName      
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Enable SSH via port 22"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
Outputs:
  URL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServer
          - PublicIp
    Description: Newly created application URL